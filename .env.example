# DevSecrin Environment Configuration
# Quick start:
# 1) Copy this file to .env: cp .env.example .env
# 2) Fill in required values (see REQUIRED section below).
# 3) Start services (DB, Redis, Ollama or a cloud LLM) and run the app.

##############################################
# REQUIRED / QUICKSTART
##############################################
# DATABASE_URL: Postgres connection string used by the API
# Example: postgresql://<user>:<password>@localhost:5432/devsecrin
DATABASE_URL=postgresql://postgres:password@localhost:5432/devsecrin

# API (where the backend binds)
API_HOST=0.0.0.0
API_PORT=8000
# Public base URL used by frontend or external tools
API_BASE_URL=http://localhost:8000

# Frontend (Next.js) points to the API
NEXT_PUBLIC_API_BASE_URL=http://localhost:8000

##############################################
# AI / Model Configuration
##############################################
# Ollama (local LLM server) - optional if you use a cloud LLM
# If using Ollama locally, set host and model. Example model from repo's .env: llama3.2:latest
OLLAMA_HOST=http://localhost:11434
OLLAMA_MODEL=llama3.2:latest

# Gemini (Google Cloud) - cloud LLM & embedding provider (optional)
# Set GEMINI_API_KEY only if you will use Gemini. Never commit real keys.
GEMINI_API_KEY=your_gemini_api_key_here
GEMINI_MODEL=gemini-2.5-flash-lite

# Choose embedder/LLM provider
# EMBEDDER_NAME: 'ollama' or 'gemini'
EMBEDDER_NAME=gemini
# LLM_PROVIDER: 'ollama' or 'gemini'
LLM_PROVIDER=gemini

##############################################
# Vector DB / embeddings persistence
##############################################
# Path where Chroma persists vectors. Relative to repo root.
CHROMA_PERSIST_DIRECTORY=./chroma_store

##############################################
# Redis (optional, used for background tasks/caching)
##############################################
# Example: redis://127.0.0.1:6379
REDIS_SERVER_URL=redis://127.0.0.1:6379

##############################################
# GitHub / Integrations (optional)
##############################################
# Personal access token (optional, used for pipelines or scripts)
GITHUB_TOKEN=your_github_token_here
GITHUB_OWNER=your_github_username
GITHUB_REPO=your_repository_name

# GitHub App - used by the app when running as a GitHub App
# GITHUB_APP_SEC_KEY should be the PEM/private key (multi-line). In CI, load from secret store.
GITHUB_APP_SEC_KEY=-----BEGIN RSA PRIVATE KEY-----\n...\n-----END RSA PRIVATE KEY-----
# GitHub App numeric id
GITHUB_APP_ID=123456
# Webhook secret for verifying GitHub webhooks
GITHUB_WEBHOOK_SECRET=your_webhook_secret_here

##############################################
# Session / Security
##############################################
# Use a random secret for session signing. Generate with: openssl rand -hex 32
SESSION_SECRET_KEY=super-secret-change-me
SESSION_ALGORITHM=HS256
SESSION_ACCESS_TOKEN_EXPIRE_MINUTES=10080

##############################################
# Logging
##############################################
LOG_LEVEL=INFO
LOG_FILE=logs/app.log

# Any other provider keys (do not commit real keys)
# EXAMPLE: export sensitive vars in your shell/CI secret store instead of committing them.